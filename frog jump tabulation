class Solution {
    int minCost(int[] height) {
        int n = height.length;
        if (n == 1) return 0;  // If only one stair, no cost needed

        int[] dp = new int[n];  
        dp[0] = 0;  // No cost to start at the first stair
        dp[1] = Math.abs(height[1] - height[0]); // Cost for first jump

        for (int i = 2; i < n; i++) {
            int jumpOne = dp[i - 1] + Math.abs(height[i] - height[i - 1]);
            int jumpTwo = dp[i - 2] + Math.abs(height[i] - height[i - 2]);
            dp[i] = Math.min(jumpOne, jumpTwo);  // Store the minimum cost
        }

        return dp[n - 1]; // Minimum cost to reach the last stair
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] heights1 = {20, 30, 40, 20};
        int[] heights2 = {30, 20, 50, 10, 40};

        System.out.println(sol.minCost(heights1)); // Output: 20
        System.out.println(sol.minCost(heights2)); // Output: 30
    }
}
