import java.util.*;

public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();

        // Edge case
        if (digits == null || digits.length() == 0) {
            return result;
        }

        // Digit-to-letter mapping
        String[] mapping = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };

        // Use StringBuilder for efficient string building
        backtrack(result, digits, mapping, 0, new StringBuilder());
        return result;
    }

    private void backtrack(List<String> result, String digits, String[] mapping, int index, StringBuilder current) {
        // ‚úÖ Base case
        if (index == digits.length()) {
            result.add(current.toString());  // Convert StringBuilder to String
            return;
        }

        // Get the letters for current digit
        String letters = mapping[digits.charAt(index) - '0'];

        for (char c : letters.toCharArray()) {
            current.append(c);  // Add letter
            backtrack(result, digits, mapping, index + 1, current);  // Move to next digit
            current.deleteCharAt(current.length() - 1);  // üîÅ Backtrack (remove last added letter)
        }
    }
}
