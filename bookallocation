import java.util.ArrayList;

public class Solution {
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        if (m > n) {
            return -1;
        }

        int low = Integer.MIN_VALUE, high = 0;
        for (int pages : arr) {
            low = Math.max(low, pages);
            high += pages;
        }

        int result = -1;
        while (low <= high) {
            int mid = (low + high) / 2;

            // Convert ArrayList to int[]
            int[] arrArray = new int[n];
            for (int i = 0; i < n; i++) {
                arrArray[i] = arr.get(i);
            }

            // Use arrArray instead of arr
            if (isPossible(arrArray, n, m, mid)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return result;
    }

    private static boolean isPossible(int[] arr, int n, int m, int maxPages) {
        int studentCount = 1, sum = 0;

        for (int pages : arr) {
            if (sum + pages > maxPages) {
                studentCount++;  // Assign new student
                sum = pages;     // Start new allocation

                if (studentCount > m) return false;
            } else {
                sum += pages;
            }
        }
        return true;
    }
}
