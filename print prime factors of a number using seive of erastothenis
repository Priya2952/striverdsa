 List<Integer> result = new ArrayList<>();

        // Step 1: Sieve of Eratosthenes to get primes up to N
        boolean[] isPrime = new boolean[N + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = isPrime[1] = false;

        for (int i = 2; i * i <= N; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= N; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        // Step 2: Use these primes to check for prime factors
        for (int i = 2; i <= N; i++) {
            if (isPrime[i] && N % i == 0) {
                result.add(i);
                while (N % i == 0) {
                    N /= i;
                }
            }
        }

        // Step 3: Convert result list to array
        int[] arr = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            arr[i] = result.get(i);
        }

        return arr;
    }
}
