class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length == 0) return new int[0][];
        
        // Step 1: Sort intervals based on the start value
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> result = new ArrayList<>();
        int i = 0, n = intervals.length;
        int[] newInterval = intervals[0];  // Start with the first interval

        // Step 2: Merge overlapping intervals
        while (i < n) {
            if (result.isEmpty() || result.get(result.size() - 1)[1] < intervals[i][0]) {
                result.add(intervals[i]);  // No overlap, add interval
            } else {
                // Merge overlapping intervals
                int[] last = result.get(result.size() - 1);
                last[1] = Math.max(last[1], intervals[i][1]);
            }
            i++;
        }

        // Convert List<int[]> to int[][]
        return result.toArray(new int[result.size()][]);
    
    }
}
