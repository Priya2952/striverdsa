class Solution {
    public int findMaximum(int[] arr) {
         int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is the bitonic point
            if ((mid == 0 || arr[mid] > arr[mid - 1]) &&
                (mid == arr.length - 1 || arr[mid] > arr[mid + 1])) {
                return arr[mid];
            }

            // If the left neighbor is greater, move to the left half
            if (mid > 0 && arr[mid - 1] > arr[mid]) {
                high = mid - 1;
            } else {
                // Otherwise, move to the right half
                low = mid + 1;
            }
        }

        // In case the array is empty (edge case)
        return -1;
    }
}
