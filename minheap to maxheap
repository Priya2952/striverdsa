class Solution {
    public int[] minToMaxHeap(int[] nums) {
        int n = nums.length;

        // Start from last non-leaf node and move up to the root
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapifyDownMax(nums, n, i);
        }

        return nums; // Now nums is a max heap
    }

    // Heapify-down for max heap property
    private void heapifyDownMax(int[] arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest])
            largest = left;

        if (right < n && arr[right] > arr[largest])
            largest = right;

        if (largest != i) {
            // Swap
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;

            // Recursively heapify affected subtree
            heapifyDownMax(arr, n, largest);
        }
    }
}
