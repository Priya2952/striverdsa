import java.util.ArrayList;
import java.util.List;

public class SubsequencesWithSumK {
    public static void findSubsequencesWithSum(int[] arr, int index, List<Integer> current, int sum, int target) {
        // Base case: if we reach the end of the array
        if (index == arr.length) {
            if (sum == target) {
                System.out.println(current);
            }
            return;
        }

        // **Step 1: Include the current element**
        current.add(arr[index]);       // Add current element to the list
        sum = sum + arr[index];        // Update the sum
        findSubsequencesWithSum(arr, index + 1, current, sum, target); // Recursive call for inclusion
        sum = sum - arr[index];        // Backtrack: restore the sum
        current.remove(current.size() - 1); // Backtrack: remove the last element added

        // **Step 2: Exclude the current element**
        findSubsequencesWithSum(arr, index + 1, current, sum, target); // Recursive call for exclusion
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 1};
        int k = 2;
        List<Integer> current = new ArrayList<>();
        findSubsequencesWithSum(arr, 0, current, 0, k);
    }
}
