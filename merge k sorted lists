/*Definition for singly Linked List
class ListNode {
    int val;
    ListNode next;

    ListNode() {
        val = 0;
        next = null;
    }

    ListNode(int data1) {
        val = data1;
        next = null;
    }

    ListNode(int data1, ListNode next1) {
        val = data1;
        next = next1;
    }
}
*/

class Solution {
  public ListNode mergeKSortedLists(List<ListNode> heads) {

    if (heads == null || heads.size() == 0) {
      return null;
    }

    PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);

    for (ListNode node : heads) {
      if (node != null) {
        pq.offer(node);
      }
    }

    ListNode dummy = new ListNode(0);
    ListNode tail = dummy;

    while (!pq.isEmpty()) {
      ListNode minNode = pq.poll();
      tail.next = minNode;
      tail = tail.next;

      if (minNode.next != null) {
        pq.offer(minNode.next);
      }
    }

    return dummy.next;
  }
}
