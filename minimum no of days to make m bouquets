class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        if((long) m * k > n){
            return -1;
        }

        int low = Integer.MAX_VALUE, high = Integer.MIN_VALUE;
        for(int d : bloomDay){
            low = Math.min(low,d);
            high = Math.max(high,d);
        }

        while(low < high){
            int mid = low + (high - low) / 2;
            if(canMake(bloomDay, m, k, mid)){
                high = mid;
            }else{
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean canMake(int[] bloomDay, int m, int k, int d){
        int bouquets = 0, consecutive = 0;
        for(int day : bloomDay){
            if(day <= d){
                if(++consecutive == k){
                    bouquets++;
                    consecutive = 0;
                    if(bouquets >= m){
                        return true;
                    }
                }
            } else {
                consecutive = 0;  // Reset when a bad flower is found
            }
        }
        return false;
    }
}
