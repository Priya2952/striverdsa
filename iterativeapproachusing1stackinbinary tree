import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class PostOrderTraversal {
    public List<Integer> postOrderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root;
        TreeNode lastVisited = null;

        while (current != null || !stack.isEmpty()) {
            // Traverse to the leftmost node
            while (current != null) {
                stack.push(current);
                current = current.left;
            }

            // Peek the top node from the stack
            TreeNode node = stack.peek();

            // Check if we can visit the right subtree
            if (node.right != null && lastVisited != node.right) {
                current = node.right;
            } else {
                // Visit the node
                result.add(node.val);
                lastVisited = stack.pop();
            }
        }

        return result;
    }

    public static void main(String[] args) {
        // Example binary tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        PostOrderTraversal traversal = new PostOrderTraversal();
        List<Integer> result = traversal.postOrderTraversal(root);

        System.out.println("Post-order Traversal: " + result);
    }
}
